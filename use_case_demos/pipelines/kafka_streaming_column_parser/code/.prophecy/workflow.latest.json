{
  "metainfo" : {
    "migrationVersions" : {
      "gemBuilderVersion" : "v1",
      "unitTestNullDataMigrated" : true
    },
    "functions" : { },
    "codeGenConfiguration" : {
      "editableConfig" : true,
      "plibVersion" : {
        "mavenVersion" : "8.6.0",
        "pyPiVersion" : "1.9.28"
      },
      "sparkConfigJinjaEnabled" : true
    },
    "id" : "1",
    "uri" : "pipelines/kafka_streaming_column_parser",
    "pipelineSettingsInfo" : {
      "applicationName" : "kafka_streaming_column_parser",
      "hasApplication" : true,
      "isFunctionsPackageDirDefined" : true,
      "isNullValuesInUnitTestsEnabled" : true
    },
    "language" : "python",
    "fabricId" : "2122",
    "frontEndLanguage" : "sql",
    "mode" : "stream",
    "udfs" : {
      "language" : "python",
      "udfs" : [ ],
      "functionPackageName" : "demoteamabhinav.usecasedemos.functions",
      "sharedFunctionPackageNames" : [ "prophecy.spark_basic.functions", "prophecy.warehouse.functions", "prophecy.streaming.functions", "demoteamabhinav.customgemdemosnew.functions" ]
    },
    "udafs" : {
      "language" : "python",
      "code" : ""
    },
    "configuration" : {
      "common" : {
        "type" : "record",
        "fields" : [ ]
      },
      "oldCommon" : {
        "type" : "record",
        "fields" : [ ]
      },
      "fabrics" : { },
      "instances" : { },
      "selected" : "default",
      "nonEditable" : [ ],
      "isSubscribedPipelineWithPipelineConfigs" : false
    },
    "sparkConf" : [ ],
    "hadoopConf" : [ ],
    "codeMode" : "sparse",
    "buildSystem" : "maven",
    "externalDependencies" : [ ],
    "dependentProjectExternalDependencies" : [ {
      "projectUID" : "12654",
      "projectName" : "ProphecySparkBasicsPython",
      "externalDependencies" : [ ]
    }, {
      "projectUID" : "12655",
      "projectName" : "ProphecyWarehousePython",
      "externalDependencies" : [ ]
    }, {
      "projectUID" : "12656",
      "projectName" : "ProphecyStreamingPython",
      "externalDependencies" : [ ]
    }, {
      "projectUID" : "30492",
      "projectName" : "custom_gem_demos_new",
      "externalDependencies" : [ {
        "type" : "plibMaven",
        "modifiedAt" : "2024-07-21T07:30:16.129693Z",
        "name" : "plibMaven",
        "enabled" : true,
        "version" : "8.1.8",
        "id" : "848385427",
        "createdAt" : "2024-07-21T07:30:16.129693Z",
        "entity" : "Project"
      }, {
        "type" : "plibPypi",
        "modifiedAt" : "2024-10-01T19:25:32.987Z",
        "name" : "ProphecyLibsPython",
        "enabled" : true,
        "version" : "1.9.14",
        "id" : "1875097243",
        "createdAt" : "2024-07-21T07:30:16.129693Z",
        "entity" : "Project"
      }, {
        "type" : "pypi",
        "modifiedAt" : "2024-11-11T09:57:24.549Z",
        "package" : "paramiko",
        "name" : "sftp",
        "description" : "",
        "enabled" : true,
        "id" : "TQDUzgWG43xWmTWFD6fdZ",
        "createdAt" : "2024-11-11T09:57:24.549Z",
        "entity" : "Project",
        "editable" : true
      } ]
    } ],
    "isImported" : false,
    "interimMode" : "Full",
    "interimModeEnabled" : true,
    "visualCodeInterimMode" : "Disabled",
    "recordsLimit" : {
      "enabled" : false,
      "value" : 1000
    },
    "topLevelPackage" : "kafka_streaming_column_parser",
    "configurationVersion" : "v2"
  },
  "connections" : [ {
    "id" : "aneINB19pydATsxkf4KJ9$$vRoWiOs6hc4--KhrZ5UKN",
    "source" : "Z0KyNuKu159v66J0mvsSq$$kvTVdK3_AMcyrbHNQUTpI",
    "sourcePort" : "ZcvcXc0HuLpEF-reVw4tB$$0SV0aZK88oKr0KFScZTbH",
    "target" : "d382F8l6ZVthPAZZT9j_6$$Ng5-pCpsAMWmHfKAoUcfy",
    "targetPort" : "E0kZeVcSiJuqhHON67Qhj$$HwhBZe8I1klGMeXKt0vb3"
  }, {
    "id" : "rGBD8n6IWIHCL7MrAza2h",
    "source" : "aKmc4EHM_cJ0qU5Rvnwfc$$pTea54UpqXI1ukqlm1Ny7",
    "sourcePort" : "nFmdiu_3zy0PayB31qpgp$$Z4ZSSLxUQBZajqBfHR3oT",
    "target" : "Z0KyNuKu159v66J0mvsSq$$kvTVdK3_AMcyrbHNQUTpI",
    "targetPort" : "9DqpshjRYMlT3uNYuK5hp$$Zj4J-oSEWxFF-TMkmJEUn"
  } ],
  "processes" : {
    "aKmc4EHM_cJ0qU5Rvnwfc$$pTea54UpqXI1ukqlm1Ny7" : {
      "id" : "aKmc4EHM_cJ0qU5Rvnwfc$$pTea54UpqXI1ukqlm1Ny7",
      "component" : "StreamingSource",
      "metadata" : {
        "label" : "streaming_kafka",
        "slug" : "streaming_kafka",
        "x" : -420,
        "y" : -60,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "Sets up a streaming Kafka consumer to read data from a Kafka topic, applying necessary security configurations and converting the data types of the key and value columns.",
        "autoUpdateComment" : true
      },
      "ports" : {
        "inputs" : [ ],
        "outputs" : [ {
          "id" : "nFmdiu_3zy0PayB31qpgp$$Z4ZSSLxUQBZajqBfHR3oT",
          "slug" : "out"
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "datasetId" : "datasets/streaming_kafka"
      }
    },
    "d382F8l6ZVthPAZZT9j_6$$Ng5-pCpsAMWmHfKAoUcfy" : {
      "id" : "d382F8l6ZVthPAZZT9j_6$$Ng5-pCpsAMWmHfKAoUcfy",
      "component" : "StreamingTarget",
      "metadata" : {
        "label" : "streaming_kafka_target",
        "slug" : "streaming_kafka_target",
        "x" : 20,
        "y" : -60,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "Streams data from a source into a Delta table, enabling real-time data processing and analysis.",
        "autoUpdateComment" : true
      },
      "ports" : {
        "inputs" : [ {
          "id" : "E0kZeVcSiJuqhHON67Qhj$$HwhBZe8I1klGMeXKt0vb3",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "key",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "value",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "topic",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "partition",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "offset",
              "type" : "long",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "timestamp",
              "type" : "timestamp",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "timestampType",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "json_parsed_content",
              "type" : {
                "type" : "struct",
                "fields" : [ {
                  "name" : "ordertime",
                  "type" : "long",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "orderid",
                  "type" : "long",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "itemid",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "address",
                  "type" : {
                    "type" : "struct",
                    "fields" : [ {
                      "name" : "city",
                      "type" : "string",
                      "nullable" : true,
                      "metadata" : {
                        "description" : "",
                        "mappings" : [ ],
                        "tags" : [ ]
                      }
                    }, {
                      "name" : "state",
                      "type" : "string",
                      "nullable" : true,
                      "metadata" : {
                        "description" : "",
                        "mappings" : [ ],
                        "tags" : [ ]
                      }
                    }, {
                      "name" : "zipcode",
                      "type" : "long",
                      "nullable" : true,
                      "metadata" : {
                        "description" : "",
                        "mappings" : [ ],
                        "tags" : [ ]
                      }
                    } ]
                  },
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                } ]
              },
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "outputs" : [ ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : false,
        "autoUpdateOnRun" : false
      },
      "properties" : {
        "datasetId" : "datasets/streaming_kafka_target"
      }
    },
    "Z0KyNuKu159v66J0mvsSq$$kvTVdK3_AMcyrbHNQUTpI" : {
      "id" : "Z0KyNuKu159v66J0mvsSq$$kvTVdK3_AMcyrbHNQUTpI",
      "component" : "Script",
      "metadata" : {
        "label" : "json_parsing_with_inference",
        "slug" : "json_parsing_with_inference",
        "x" : -200,
        "y" : -60,
        "phase" : 0,
        "cache" : false,
        "detailedStats" : false,
        "isImported" : false,
        "comment" : "Extracts and structures JSON data from a given dataset, enabling better analysis of order-related information.",
        "autoUpdateComment" : true
      },
      "ports" : {
        "inputs" : [ {
          "id" : "9DqpshjRYMlT3uNYuK5hp$$Zj4J-oSEWxFF-TMkmJEUn",
          "slug" : "in0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "key",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "value",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "topic",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "partition",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "offset",
              "type" : "long",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "timestamp",
              "type" : "timestamp",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "timestampType",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : true
        } ],
        "outputs" : [ {
          "id" : "ZcvcXc0HuLpEF-reVw4tB$$0SV0aZK88oKr0KFScZTbH",
          "slug" : "out0",
          "schema" : {
            "type" : "struct",
            "fields" : [ {
              "name" : "key",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "value",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "topic",
              "type" : "string",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "partition",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "offset",
              "type" : "long",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "timestamp",
              "type" : "timestamp",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "timestampType",
              "type" : "integer",
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            }, {
              "name" : "json_parsed_content",
              "type" : {
                "type" : "struct",
                "fields" : [ {
                  "name" : "ordertime",
                  "type" : "long",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "orderid",
                  "type" : "long",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "itemid",
                  "type" : "string",
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                }, {
                  "name" : "address",
                  "type" : {
                    "type" : "struct",
                    "fields" : [ {
                      "name" : "city",
                      "type" : "string",
                      "nullable" : true,
                      "metadata" : {
                        "description" : "",
                        "mappings" : [ ],
                        "tags" : [ ]
                      }
                    }, {
                      "name" : "state",
                      "type" : "string",
                      "nullable" : true,
                      "metadata" : {
                        "description" : "",
                        "mappings" : [ ],
                        "tags" : [ ]
                      }
                    }, {
                      "name" : "zipcode",
                      "type" : "long",
                      "nullable" : true,
                      "metadata" : {
                        "description" : "",
                        "mappings" : [ ],
                        "tags" : [ ]
                      }
                    } ]
                  },
                  "nullable" : true,
                  "metadata" : {
                    "description" : "",
                    "mappings" : [ ],
                    "tags" : [ ]
                  }
                } ]
              },
              "nullable" : true,
              "metadata" : {
                "description" : "",
                "mappings" : [ ],
                "tags" : [ ]
              }
            } ]
          },
          "isStreaming" : false
        } ],
        "selectedInputFields" : [ ],
        "isCustomOutputSchema" : true,
        "autoUpdateOnRun" : true
      },
      "properties" : {
        "script" : "def json_parse_new(in0, column_to_parse, parsingMethod, sampleRecord, schema, schemaInferCount):\n    try:\n        from pyspark.sql.functions import from_json, schema_of_json, lit\n        from pyspark.sql.types import StructType\n        if parsingMethod in [\"parseFromSampleRecord\", \"parseAuto\"]:\n            if parsingMethod == \"parseFromSampleRecord\":\n                sample_json = sampleRecord\n                json_schema = schema_of_json(lit(sample_json))\n                output_df = in0.withColumn(\"json_parsed_content\",\n                                           from_json(column_to_parse, json_schema))\n            else:\n                combined_json_df = in0.limit(schemaInferCount).select(\n                    concat_ws(\",\", collect_list(column_to_parse)).alias(\"combined_json\"))\n                sample_json = \"[\" + combined_json_df.collect()[0][\"combined_json\"] + \"]\"\n                json_schema = schema_of_json(lit(sample_json))\n                output_df = in0.withColumn(\"json_parsed_content\",\n                                           from_json(column_to_parse, json_schema).getItem(0))\n        else:\n            try:\n                print(\"here\")\n                json_schema = StructType.fromDDL(schema)\n                raise Exception\n            except:\n                print(\"there\")\n                json_schema = schema\n            output_df = in0.withColumn(\"json_parsed_content\", expr(f\"from_json({column_to_parse}, '{json_schema}')\" ))\n        return output_df\n    except Exception as e:\n        print(f\"An error occurred while fetching data: {e}\")\n        raise e\n\nout0 = json_parse_new(\n        in0,\n        \"value\",\n        \"parseFromSampleRecord123\",\n        \"\"\"{\"ordertime\": 1653429876, \"orderid\": 4271, \"itemid\": \"item_zqgty\", \"address\": {\"city\": \"Nerlus\", \"state\": \"CA\", \"zipcode\": 98321}}\"\"\",\n        \"STRUCT<\\n  ordertime: LONG,\\n  orderid: LONG,\\n  itemid: STRING,\\n  address: STRUCT<\\n    city: STRING,\\n    state: STRING,\\n    zipcode: LONG\\n  >\\n>\",\n        40\n    )\n",
        "scriptMethodHeader" : "def Script(spark: SparkSession, in0: DataFrame) -> DataFrame:",
        "scriptMethodFooter" : "    return out0"
      }
    }
  },
  "ports" : {
    "inputs" : [ ],
    "outputs" : [ ],
    "selectedInputFields" : [ ],
    "isCustomOutputSchema" : false,
    "autoUpdateOnRun" : false
  }
}