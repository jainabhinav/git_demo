{"initCode":"import scala.reflect.runtime.{universe => ru}\r\nimport scala.reflect.runtime.currentMirror\r\n\r\ndef ff3_encrypt(\r\n        ff3_key: String,\r\n        ff3_tweak: String,\r\n        plainValue: String\r\n    ): String = {\r\n      try {\r\n        if (plainValue != null) {\r\n          val ff3CipherClass =\r\n            currentMirror.classLoader.loadClass(\r\n              \"io.prophecy.cipher.FF3FPECipher\"\r\n            )\r\n          val ff3CipherConstructor =\r\n            ff3CipherClass.getConstructor(classOf[String], classOf[String])\r\n          val c = ff3CipherConstructor\r\n            .newInstance(ff3_key, ff3_tweak)\r\n            .asInstanceOf[{\r\n                def encryptPreservingFormat(plainValue: String): String\r\n              }\r\n            ]\r\n          val ciphertext = c.encryptPreservingFormat(plainValue)\r\n          ciphertext\r\n        } else {\r\n          null\r\n        }\r\n      } catch {\r\n        case _: ClassNotFoundException => {\r\n          throw new Exception(\r\n            \"Please install ff3_fpe_cipher_1_0 and log4j_api_2_17_1 jar on the cluster to use ff3_encrypt_idwdata function\"\r\n          )\r\n          null\r\n        }\r\n        case default: Throwable => {\r\n          println(\"Exception while converting encrypting value: \" + plainValue)\r\n          null\r\n        }\r\n      }\r\n    }","code":"udf(ff3_encrypt _)"}